container = upload_grp
)
calc_matrix()
vis_descriptor()
file_dump()
status_bar = gstatusbar("", container = load_win)
#oD descriptors to be calculated with the cartesian loading
}
file_uploader()
View(vis_descriptor)
View(vis_descriptor)
View(vis_descriptor)
calc_matrix = function(){
graph_matrices_grp = ggroup(horizontal = FALSE,
container = upload_grp)
matrices_calc_btn = gbutton(
"Graphical matrices calculation",
container = graph_matrices_grp,
handler = function(h, ...){
Moleculors$graphical_matrix()
#matrix_picker = gmenu(c(),
#container = graph_matrices_grp)
}
)
}
file_uploader()
vis_descriptor = function() {
descriptor_grp = ggroup(horizontal = FALSE,
container = upload_grp)
descriptor_calc_btn = gbutton(
"Molecular descriptors calculation",
container = descriptor_grp,
handler = function(h, ...){
# calculation function
#descriptor_picker = gmenu(c(),
#container = descriptor_grp)
}
)
}
descriptor_grp = ggroup(horizontal = FALSE,
container = upload_grp)
dim(Mol_mat)
Mol_mat
View(Mol_mat)
length(Mol_mat)
lenght(Ouput_descp)
length(Ouput_descp)
is.matrix(Mol_mat$graph_Vdistance_matrix)
Moleculors = new.env()
Mol_mat = new.env()
Output_descp = new.env()
source("R/Molecular_Input_v01.R")
source("R/Molecular_graph_V01.R")
source("R/GUI_V01.R")
file_uploader()
source("R/Molecular_Input_v01.R")
source("R/Molecular_graph_V01.R")
Moleculors = new.env()
Mol_mat = new.env()
Output_descp = new.env()
source("R/Molecular_Input_v01.R")
source("R/Molecular_graph_V01.R")
source("R/GUI_V01.R")
file_uploader()
Moleculors$descriptor_launcher = function(){
if (length(Mol_mat) > 0) {
Moleculors$molecular_weight()
Moleculors$N_atoms()
Moleculors$Wiener_index_calc()
Moleculors$Platt_number_calc()
Moleculors$Zagreb_index_calc()
Moleculors$Balaban_index_calc()
} else {
message("No molecular descriptors were computed")
}
}
file_uploader = function(){
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload_grp = ggroup(container = welcome_grp)
upload_btn = gbutton(
"Upload Cartesian Coordinates",
container = upload_grp,
handler = function(h, ...){
Moleculors$molecular_input()
cartesian_output = gtable(Mol_mat$input, container = welcome_grp)
}
)
decimal_place <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = decimal_place(),
container = upload_grp
)
calc_matrix()
vis_descriptor()
file_dump()
status_bar = gstatusbar("", container = load_win)
}
Moleculors = new.env()
Mol_mat = new.env()
Output_descp = new.env()
source("R/Molecular_Input_v01.R")
source("R/Molecular_graph_V01.R")
source("R/GUI_V01.R")
file_uploader()
Moleculors$descriptor_launcher = function(){
if (length(Mol_mat) > 0) {
Moleculors$molecular_weight()
Moleculors$N_atoms()
Moleculors$Wiener_index_calc()
Moleculors$Platt_number_calc()
Moleculors$Zagreb_index_calc()
Moleculors$Balaban_index_calc()
} else {
message("No molecular descriptors were computed")
}
}
file_uploader()
Moleculors$molecular_weight()
Moleculors$molecular_weight = function(){
if (is.data.frame(Mol_mat$input)) {
Weight_library = read.csv("tables/weight_table.csv")
} else {
message("No Input file detected")
return(message("Weight... FAILED"))
}
weight_vector = vector()
for (i in 1:nrow(Mol_mat$input)) {
weight_vector[i] = Weight_library$Weight[Weight_library$Symbol == as.character(Mol_mat$input$Atom[i])]
}
Output_descp$Weight = sum(weight_vector)
return(message("Weight... Ok"))
}
Moleculors$N_atoms = function(){
if(is.data.frame(Mol_mat$input)){
Output_descp$Natoms = nrow(Mol_mat$input)
} else {
message("No Input file detected")
return("N° of atoms... FAILED")
}
return(message("N° of atoms... OK"))
}
source("R/GUI_V01.R")
source("R/zeroD_descriptor_V01.R")
source("R/twoD_descriptor_V01.R")
file_uploader()
hydrogen_vector = c()
for (i in 1:nrow(Mol_mat$input)) {
if (as.character(Mol_mat$input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Mol_mat$input)) {
input_H_suppressed = Mol_mat$input[-hydrogen_vector,]
}
}
typeof(input_H_suppressed)
View(input_H_suppressed)
is.list(input_H_suppressed)
Moleculors = new.env()
Mol_mat = new.env()
Output_descp = new.env()
source("R/Molecular_Input_v01.R")
source("R/Molecular_graph_V01.R")
source("R/GUI_V01.R")
source("R/zeroD_descriptor_V01.R")
source("R/twoD_descriptor_V01.R")
file_uploader()
source("R/descriptor_launcher_V01.R")
Moleculors_GUI = function(){
environment(upload) <- environment()
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload()
calc_matrix()
vis_descriptor()
file_dump()
status_bar = gstatusbar("", container = load_win)
}
upload = function() {
upload_grp = ggroup(container = welcome_grp)
upload_btn = gbutton(
"Upload Cartesian Coordinates",
container = upload_grp,
handler = function(h, ...){
Moleculors$molecular_input()
cartesian_output = gtable(Mol_mat$input, container = welcome_grp)
}
)
decimal_place <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = decimal_place(),
container = upload_grp
)
}
calc_matrix = function(){
graph_matrices_grp = ggroup(horizontal = FALSE,
container = upload_grp)
matrices_calc_btn = gbutton(
"Graphical matrices calculation",
container = graph_matrices_grp,
handler = function(h, ...){
Moleculors$graphical_matrix()
#matrix_picker = gmenu(c(),
#container = graph_matrices_grp)
}
)
}
vis_descriptor = function() {
descriptor_grp = ggroup(horizontal = FALSE,
container = upload_grp)
descriptor_calc_btn = gbutton(
"Molecular descriptors calculation",
container = descriptor_grp,
handler = function(h, ...){
Moleculors$descriptor_launcher()
#descriptor_picker = gmenu(c(),
#container = descriptor_grp)
}
)
}
file_dump = function(){
dumper_grp = ggroup(horizontal = FALSE,
container = upload_grp)
dumper_btn = gbutton(
"Download output file",
container = dumper_grp,
handler = function(h, ...){
}
)
}
Moleculors_GUI()
Moleculors_GUI = function(){
environment(upload) <- environment()
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
upload_grp = ggroup(container = welcome_grp)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload()
calc_matrix()
vis_descriptor()
file_dump()
status_bar = gstatusbar("", container = load_win)
}
Moleculors_GUI()
upload = function() {
upload_grp = ggroup(container = welcome_grp)
upload_btn = gbutton(
"Upload Cartesian Coordinates",
container = upload_grp,
handler = function(h, ...){
Moleculors$molecular_input()
cartesian_output = gtable(Mol_mat$input, container = welcome_grp)
}
)
decimal_place <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = decimal_place(),
container = upload_grp
)
}
calc_matrix = function(){
graph_matrices_grp = ggroup(horizontal = FALSE,
container = upload_grp)
matrices_calc_btn = gbutton(
"Graphical matrices calculation",
container = graph_matrices_grp,
handler = function(h, ...){
Moleculors$graphical_matrix()
#matrix_picker = gmenu(c(),
#container = graph_matrices_grp)
}
)
}
vis_descriptor = function() {
descriptor_grp = ggroup(horizontal = FALSE,
container = upload_grp)
descriptor_calc_btn = gbutton(
"Molecular descriptors calculation",
container = descriptor_grp,
handler = function(h, ...){
Moleculors$descriptor_launcher()
#descriptor_picker = gmenu(c(),
#container = descriptor_grp)
}
)
}
file_dump = function(){
dumper_grp = ggroup(horizontal = FALSE,
container = upload_grp)
dumper_btn = gbutton(
"Download output file",
container = dumper_grp,
handler = function(h, ...){
}
)
}
environment(upload) <- environment()
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload()
calc_matrix()
environment(upload) <- environment()
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
upload_grp = ggroup(container = welcome_grp)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload()
calc_matrix()
vis_descriptor()
file_dump()
environment(upload) <- environment()
environment(calc_matrix) <- environment(upload)
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload()
calc_matrix()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload()
calc_matrix()
environment(upload) <- environment()
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
upload_grp = ggroup(container = welcome_grp)
graph_matrices_grp = ggroup(horizontal = FALSE,
container = upload_grp)
descriptor_grp = ggroup(horizontal = FALSE,
container = upload_grp)
dumper_grp = ggroup(horizontal = FALSE,
container = upload_grp)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload()
calc_matrix()
vis_descriptor()
file_dump()
Moleculors_GUI = function(){
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload_grp = ggroup(container = welcome_grp)
upload_btn = gbutton(
"Upload Cartesian Coordinates",
container = upload_grp,
handler = function(h, ...){
Moleculors$molecular_input()
cartesian_output = gtable(Mol_mat$input, container = welcome_grp)
}
)
decimal_place <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = decimal_place(),
container = upload_grp
)
calc_matrix()
vis_descriptor()
file_dump()
status_bar = gstatusbar("", container = load_win)
}
calc_matrix = function(){
graph_matrices_grp = ggroup(horizontal = FALSE,
container = upload_grp)
matrices_calc_btn = gbutton(
"Graphical matrices calculation",
container = graph_matrices_grp,
handler = function(h, ...){
Moleculors$graphical_matrix()
#matrix_picker = gmenu(c(),
#container = graph_matrices_grp)
}
)
}
vis_descriptor = function() {
descriptor_grp = ggroup(horizontal = FALSE,
container = upload_grp)
descriptor_calc_btn = gbutton(
"Molecular descriptors calculation",
container = descriptor_grp,
handler = function(h, ...){
Moleculors$descriptor_launcher()
#descriptor_picker = gmenu(c(),
#container = descriptor_grp)
}
)
}
file_dump = function(){
dumper_grp = ggroup(horizontal = FALSE,
container = upload_grp)
dumper_btn = gbutton(
"Download output file",
container = dumper_grp,
handler = function(h, ...){
}
)
}
Moleculors_GUI()
Moleculors = new.env()
Mol_mat = new.env()
Output_descp = new.env()
source("R/Molecular_Input_v01.R")
source("R/Molecular_graph_V01.R")
source("R/GUI_V01.R")
source("R/zeroD_descriptor_V01.R")
source("R/twoD_descriptor_V01.R")
source("R/descriptor_launcher_V01.R")
Moleculors_GUI = function(){
environment(calc_matrix) <- environment()
environment(vis_descriptor) = environment()
environment(file_dump) = environment()
load_win = gwindow("Moleculors GUI")
welcome_grp = ggroup(container = load_win, horizontal = FALSE)
lbl_welcome_msg = glabel(
"Welcome to the Moleculors loading service",
container = welcome_grp
)
upload_grp = ggroup(container = welcome_grp)
upload_btn = gbutton(
"Upload Cartesian Coordinates",
container = upload_grp,
handler = function(h, ...){
Moleculors$molecular_input()
}
)
decimal_place <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = decimal_place(),
container = upload_grp
)
calc_matrix()
vis_descriptor()
file_dump()
status_bar = gstatusbar("", container = load_win)
if (exists("Mol_mat$input")) {
cartesian_output = gtable(Mol_mat$input, container = welcome_grp)
}
}
Moleculors_GUI()
Moleculors_GUI()
