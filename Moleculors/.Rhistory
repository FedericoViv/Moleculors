# }
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
print(distance_vector)
for (t in 1:length(distance_vector)) {
distance_vector[t] = floor(distance_vector[t]/min(distance_vector[-i]))
}
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return("Computing graphical Matrix... OK")
}
Moleculors$graphical_matrix()
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
# for (i in (nrow(Input_H_suppressed):1)) {
#
#   Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
#   Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
#   Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
# }
#
# distance_vector = sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
#
# for (i in 1:length(distance_vector)) {
#
#   distance_vector[i] = floor(distance_vector[i]/min(distance_vector[-1]))
#
# }
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
print(distance_vector)
for (t in 1:length(distance_vector)) {
distance_vector[t] = floor(distance_vector[t]/min(distance_vector[-i]))
}
print(distance_vector)
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return("Computing graphical Matrix... OK")
}
Moleculors$graphical_matrix()
distance_vector
distance_vector[-3]
distance_vector[-8]
distance_vector[-4]
distance_vector[-2]
distance_vector[-6]
distance_vector[2]
2*distance_vector[2]
2*distance_vector[4]
2*distance_vector[5]
distance_vector[5]
distance_vector[6]
2*distance_vector[6]
typeof(distance_vector)
as.vector(distance_vector)
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
# for (i in (nrow(Input_H_suppressed):1)) {
#
#   Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
#   Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
#   Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
# }
#
# distance_vector = sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
#
# for (i in 1:length(distance_vector)) {
#
#   distance_vector[i] = floor(distance_vector[i]/min(distance_vector[-1]))
#
# }
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
distance_vector = as.vector(distance_vector)
print(distance_vector)
for (t in 1:length(distance_vector)) {
distance_vector[t] = floor(distance_vector[t]/min(distance_vector[-i]))
}
print(distance_vector)
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return("Computing graphical Matrix... OK")
}
Moleculors$graphical_matrix()
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
# for (i in (nrow(Input_H_suppressed):1)) {
#
#   Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
#   Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
#   Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
# }
#
# distance_vector = sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
#
# for (i in 1:length(distance_vector)) {
#
#   distance_vector[i] = floor(distance_vector[i]/min(distance_vector[-1]))
#
# }
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
#distance_vector = as.vector(distance_vector)
print(distance_vector)
for (t in 1:length(distance_vector)) {
print(distance_vector[t]/min(distance_vector[-i]))
distance_vector[t] = floor(distance_vector[t]/min(distance_vector[-i]))
}
print(distance_vector)
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return("Computing graphical Matrix... OK")
}
Moleculors$graphical_matrix()
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
# for (i in (nrow(Input_H_suppressed):1)) {
#
#   Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
#   Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
#   Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
# }
#
# distance_vector = sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
#
# for (i in 1:length(distance_vector)) {
#
#   distance_vector[i] = floor(distance_vector[i]/min(distance_vector[-1]))
#
# }
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
#distance_vector = as.vector(distance_vector)
print(distance_vector)
normalizer = min(distance_vector[-i])
for (t in 1:length(distance_vector)) {
print(distance_vector[t]/min(distance_vector[-i]))
distance_vector[t] = floor(distance_vector[t]/normalizer)
}
print(distance_vector)
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return("Computing graphical Matrix... OK")
}
Moleculors$graphical_matrix()
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
i = 2
i = 1
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
#distance_vector = as.vector(distance_vector)
print(distance_vector)
normalizer = min(distance_vector[-i])
normalizer
print(distance_vector[t]/normalizer)
for (t in 1:length(distance_vector)) {
print(distance_vector[t]/normalizer)
distance_vector[t] = floor(distance_vector[t]/normalizer)
}
print(distance_vector)
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
# for (i in (nrow(Input_H_suppressed):1)) {
#
#   Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
#   Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
#   Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
# }
#
# distance_vector = sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
#
# for (i in 1:length(distance_vector)) {
#
#   distance_vector[i] = floor(distance_vector[i]/min(distance_vector[-1]))
#
# }
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
#distance_vector = as.vector(distance_vector)
print(distance_vector)
normalizer = min(distance_vector[-i])
for (t in 1:length(distance_vector)) {
print(distance_vector[t]/normalizer)
distance_vector[t] = floor(distance_vector[t]/normalizer)
}
print(distance_vector)
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return("Computing graphical Matrix... OK")
}
Moleculors$graphical_matrix()
Moleculors$graph_matrix
?round
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
# for (i in (nrow(Input_H_suppressed):1)) {
#
#   Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
#   Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
#   Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
# }
#
# distance_vector = sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
#
# for (i in 1:length(distance_vector)) {
#
#   distance_vector[i] = floor(distance_vector[i]/min(distance_vector[-1]))
#
# }
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
print(Input_H_suppressed_norm)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
#distance_vector = as.vector(distance_vector)
print(distance_vector)
normalizer = min(distance_vector[-i])
for (t in 1:length(distance_vector)) {
print(distance_vector[t]/normalizer)
distance_vector[t] = ceiling(distance_vector[t]/normalizer)
}
print(distance_vector)
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return("Computing graphical Matrix... OK")
}
Moleculors$graphical_matrix()
Moleculors$graph_matrix
Moleculors$Molecular_input()
Moleculors = new.env()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
Moleculors$Input = cartesian_csv
return(message("Loading successful"))
}
Moleculors$molecular_weight = function(){
if (is.data.frame(Moleculors$Input)) {
Weight_library = read.csv("tables/weight_table.csv")
} else {
message("No Input file detected")
return(message("Weight... FAILED"))
}
weight_vector = vector()
for (i in 1:nrow(Moleculors$Input)) {
weight_vector[i] = Weight_library$Weight[Weight_library$Symbol == as.character(Moleculors$Input$Atom[i])]
}
Moleculors$Weight = sum(weight_vector)
return(message("Weight... Ok"))
}
Moleculors$N_atoms = function(){
if(is.data.frame(Moleculors$Input)){
Moleculors$Natoms = nrow(Moleculors$Input)
} else {
message("No Input file detected")
return("N° of atoms... FAILED")
}
return(message("N° of atoms... OK"))
}
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_matrix)) {
for (h in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed_norm$X[h] = Input_H_suppressed$X[h] - Input_H_suppressed$X[i]
Input_H_suppressed_norm$Y[h] = Input_H_suppressed$Y[h] - Input_H_suppressed$Y[i]
Input_H_suppressed_norm$Z[h] = Input_H_suppressed$Z[h] - Input_H_suppressed$Z[i]
}
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
normalizer = min(distance_vector[-i])
for (t in 1:length(distance_vector)) {
distance_vector[t] = ceiling(distance_vector[t]/normalizer)
}
for (j in 1:ncol(graph_matrix)) {
graph_matrix[i,j] = abs(distance_vector[j] - distance_vector[i])
if (i != j & distance_vector[j] - distance_vector[i] == 0) {
graph_matrix[i,j] = distance_vector[i]
}
}
}
Moleculors$graph_matrix = graph_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
return(message("Computing graphical Matrix... OK"))
}
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$graph_matrix
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$graph_matrix
