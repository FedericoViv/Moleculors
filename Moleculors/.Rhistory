source(General_v01.R)
source(General_v01.R)
source('General_v01.R')
source("General_v01.R")
source("General_v01.R", local = T)
wd
pwd
source("R/General_v01.R", local = T)
source("R/General_v01.R")
?tryCatch
Moleculors$Molecular_input = function(){
tryCatch(cartesian_csv = read.csv(file.choose(), header = FALSE),
finally = print("Input files should be a cartesian csv file"))
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input files should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors = new.env()
Moleculors$Molecular_input = function(){
tryCatch(cartesian_csv = read.csv(file.choose(), header = FALSE),
finally = print("Input files should be a cartesian csv file"))
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input files should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
# tryCatch(expr = cartesian_csv = read.csv(file.choose()), header = FALSE),
#   finally = print("Input files should be a cartesian csv file"))
cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input files should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
tryCatch(cartesian_csv = read.csv(file.choose()), header = FALSE,
finally = print("Input files should be a cartesian csv file"))
#cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input files should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input()
?try
Moleculors$Molecular_input = function(){
cartesian_csv = try(read.csv(file.choose()), header = FALSE,
finally = print("Input file should be a cartesian csv file"))
#cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = try(read.csv(file.choose(), header = FALSE),
finally = print("Input file should be a cartesian csv file"))
#cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch(read.csv(file.choose(), header = FALSE),
finally = print("Input file should be a cartesian csv file"))
#cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch(read.csv(file.choose(), header = FALSE),
finally = print("Input file should be a cartesian csv fileeee"))
#cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
cartesian_csv = read.csv(file.choose()
a+
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch(read.csv(file.choose(), header = FALSE),
finally = return("Input file should be a cartesian csv file"))
#cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
#cartesian_csv = tryCatch(read.csv(file.choose(), header = FALSE),
#finally = return("Input file should be a cartesian csv file"))
try(cartesian_csv = read.csv(file.choose()))
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
#cartesian_csv = tryCatch(read.csv(file.choose(), header = FALSE),
#finally = return("Input file should be a cartesian csv file"))
cartesian_csv = try(read.csv(file.choose()))
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
#cartesian_csv = tryCatch(read.csv(file.choose(), header = FALSE),
#finally = return("Input file should be a cartesian csv file"))
cartesian_csv = read.csv(file.choose())
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch(read.csv(file.choose(), header = FALSE),
finally = return("Input file should be a cartesian csv file"))
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
?tryCatch
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(){
message("Input file should be a cartesian csv file")
},
finally = { message("Always use cartesian coordinates as input!")
})
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(){
message("Input file should be a cartesian csv file")
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(cond){
message("Input file should be a cartesian csv file")
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return("Input file has more/less column than expected")
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(cond){
warning("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(cond){
warning("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(cond){
warning("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
cartesian_csv = read.csv(file.choose(),
header = FALSE)
View(cartesian_csv)
cartesian_csv = read.csv(file.choose(),
header = FALSE)
View(cartesian_csv)
cartesian_csv = read.csv(file.choose(),
header = FALSE)
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(){
warning("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
return(cartesian_csv)
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(e){
warning("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
return(cartesian_csv)
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
rm(cartesian_csv)
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
error = function(e){
warning("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
prova = Moleculors$Molecular_input()
Moleculors$Molecular_input()
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
},
error = function(e){
error("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
},
error = function(e){
message("Input file should be a cartesian csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input()
Moleculors$Molecular_input()
?message
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
return("Input file should be a cartesian csv file")
} else if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
#if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
#return("Input file should be a cartesian csv file")
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input()
Moleculors$Molecular_input()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
#cartesian_csv = read.csv(file.choose(), header = FALSE)
#if (!is.data.frame(cartesian_csv)) { #maybe useless if I use the try_catch
#return("Input file should be a cartesian csv file")
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(cartesian_csv)
}
Moleculors$Molecular_input()
Moleculors$Molecular_input()
