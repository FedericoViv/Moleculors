distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-c(1,3)], 1, `^`,2), 2, sum))
normalizer = round(min(distance_vector[-i]),2)
for (t in 1:length(distance_vector)) {                 #####MUST BE FIXED
print(distance_vector[t]/normalizer)
distance_vector[t] = round(distance_vector[t]/normalizer,0)
#distance_vector[t] = ceiling(round(distance_vector[t]/normalizer,2))
}
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
normalizer = round(min(distance_vector[-i]),2)
for (t in 1:length(distance_vector)) {                 #####MUST BE FIXED
print(distance_vector[t]/normalizer)
distance_vector[t] = round(distance_vector[t]/normalizer,1)
#distance_vector[t] = ceiling(round(distance_vector[t]/normalizer,2))
}
distance_vector[t] = round(distance_vector[t]/normalizer,0)
distance_vector = sqrt(apply(apply(Input_H_suppressed_norm[,-1], 1, `^`,2), 2, sum))
normalizer = round(min(distance_vector[-i]),2)
for (t in 1:length(distance_vector)) {                 #####MUST BE FIXED
print(distance_vector[t]/normalizer)
distance_vector[t] = round(distance_vector[t]/normalizer,0)
#distance_vector[t] = ceiling(round(distance_vector[t]/normalizer,2))
}
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
Moleculors = new.env()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
Moleculors$Input = cartesian_csv
return(message("Loading successful"))
}
Moleculors$Molecular_input()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
View(Input_H_suppressed)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 + (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 + (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 + (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 + (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
Input_H_suppressed_norm = Input_H_suppressed
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
}
}
View(graph_Vdistance_matrix)
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Edistance_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = (nrow(Input_H_suppressed) - 1))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Eadj_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = (nrow(Input_H_suppressed) - 1))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (i != j & graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else{
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computed")
}
return(message("Computing graphical Matrix... OK"))
}
Moleculors$graphical_matrix()
Moleculors$graph_Vadj_matrix
typeof(Input_H_suppressed)
View(Input_H_suppressed)
View(Input_H_suppressed)
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (i != j & graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else{
graph_Vadj_matrix[i,j] = 0
}
}
}
#edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = ncol(Input_H_suppressed))
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
if (graph_Vdistance_matrix[i,j] = 0) {
graph_Edistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] = 1) {
graph_Edistance_matrix[i,j] = 1
} else {
graph_Edistance_matrix[i,j] = graph_Edistance_matrix[i,j] - 1
}
}
}
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = ncol(Input_H_suppressed))
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
if (graph_Vdistance_matrix[i,j] = 0) {
graph_Edistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] = 1) {
graph_Edistance_matrix[i,j] = 1
} else {
graph_Edistance_matrix[i,j] = graph_Edistance_matrix[i,j] - 1
}
}
}
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 0) {
graph_Edistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1) {
graph_Edistance_matrix[i,j] = 1
} else {
graph_Edistance_matrix[i,j] = graph_Edistance_matrix[i,j] - 1
}
}
}
View(graph_Edistance_matrix)
1:nrow(graph_Edistance_matrix)
View(graph_Edistance_matrix)
1:ncol(graph_Edistance_matrix)
i = 1
for (j in 1:ncol(graph_Edistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 0) {
graph_Edistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1) {
graph_Edistance_matrix[i,j] = 1
} else {
graph_Edistance_matrix[i,j] = graph_Edistance_matrix[i,j] - 1
}
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (j in 1:ncol(graph_Edistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 0) {
graph_Edistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1) {
graph_Edistance_matrix[i,j] = 1
} else {
graph_Edistance_matrix[i,j] = graph_Edistance_matrix[i,j] - 1
} print(graph_Edistance_matrix[i,j])
}
for (j in 1:ncol(graph_Edistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 0) {
graph_Edistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1) {
graph_Edistance_matrix[i,j] = 1
} else {
graph_Edistance_matrix[i,j] = graph_Edistance_matrix[i,j] - 1
}
print(graph_Edistance_matrix[i,j])
}
j = 3
graph_Vdistance_matrix[i,j] == 0
graph_Edistance_matrix[i,j] - 1
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 0) {
graph_Edistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1) {
graph_Edistance_matrix[i,j] = 1
} else {
graph_Edistance_matrix[i,j] = graph_Vdistance_matrix[i,j] - 1
}
print(graph_Edistance_matrix[i,j])
}
}
View(graph_Edistance_matrix)
View(graph_Vdistance_matrix)
edge_matrix = Input_H_suppressed[-1,-1]
View(edge_matrix)
?closest
Input_H_suppressed[,j]
abs(Input_H_suppressed[,j] - Input_H_suppressed[i,j])
which.min(abs(Input_H_suppressed[,j] - Input_H_suppressed[i,j]))
Input_H_suppressed[i,j]
i = 1
j = 1
(Input_H_suppressed[i,j]
)
Input_H_suppressed
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
Input_H_suppressed[i,j]
View(Input_H_suppressed_norm)
View(edge_matrix)
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = ncol(Input_H_suppressed))
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = (ncol(Input_H_suppressed)-1))
which.min(abs(Input_H_suppressed[,j+1] -
Input_H_suppressed[i,j+1])
)
i = 1
j = 1
Input_H_suppressed[i,(j+1)]
View(Input_H_suppressed)
which.min(abs(Input_H_suppressed[,(j+1)] -
Input_H_suppressed[i,(j+1)])
)
abs(Input_H_suppressed[,(j+1)] -
Input_H_suppressed[i,(j+1)])
which.min(abs(Input_H_suppressed[,(j+1)] -
Input_H_suppressed[-i,(j+1)]))
Input_H_suppressed[-i,(j+1)]
abs(Input_H_suppressed[i,(j+1)] -
Input_H_suppressed[-i,(j+1)]))
which.min(abs(Input_H_suppressed[i,(j+1)] -
Input_H_suppressed[-i,(j+1)]))
Input_H_suppressed[i,(j+1)
]
Input_H_suppressed[i,(j+1)]
Input_H_suppressed[which.min(abs(Input_H_suppressed[-i,(j+1)] -
Input_H_suppressed[i,(j+1)])), (j+1)]
Input_H_suppressed[-i,(j+1)]
Input_H_suppressed[i,(j+1)])
Input_H_suppressed[i,(j+1)]
Input_H_suppressed[c(-i, 2),(j+1)]
Input_H_suppressed[c(-2, 2),(j+1)]
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)])), (j+1)]
simplified_input_H_suppressed = Input_H_suppressed[-i,(j+1)]
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)])), (j+1)]
simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)])), (j+1)]
Input_H_suppressed[i,(j+1)])), (j+1)]
Input_H_suppressed[i,(j+1)]
simplified_input_H_suppressed
simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]
abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)])
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]), (j+1))])/2
(Input_H_suppressed[i,(j+1)] +
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]), (j+1))])
(Input_H_suppressed[i,(j+1)] +
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)])), (j+1)])
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)])), (j+1)]
Input_H_suppressed[i,(j+1)]
simplified_input_H_suppressed
abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)])
which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))
which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))]
(Input_H_suppressed[i,(j+1)] +
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))])/2
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = (ncol(Input_H_suppressed)-1))
for (i in 1:nrow(edge_matrix)) {
for (j in 1:ncol(edge_matrix)) {
simplified_input_H_suppressed = Input_H_suppressed[-i,(j+1)]
edge_matrix[i,j] = (Input_H_suppressed[i,(j+1)] +
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))])/2
}
}
View(edge_matrix)
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = (ncol(Input_H_suppressed)-1))
for (i in 1:nrow(edge_matrix)) {
for (j in 1:ncol(edge_matrix)) {
simplified_input_H_suppressed = Input_H_suppressed[-i,(j+1)]
edge_matrix[i,j] = (Input_H_suppressed[i,(j+1)] +
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))])/2
}
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix$X[j] - edge_matrix$X[i])^2 +
(edge_matrix$Y[j] - edge_matrix$Y[i])^2 +
(edge_matrix$Z[j] - edge_matrix$Z[i])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computed")
}
return(message("Computing graphical Matrix... OK"))
}
Moleculors$graphical_matrix()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = (ncol(Input_H_suppressed)-1))
for (i in 1:nrow(edge_matrix)) {
for (j in 1:ncol(edge_matrix)) {
simplified_input_H_suppressed = Input_H_suppressed[-i,(j+1)]
edge_matrix[i,j] = (Input_H_suppressed[i,(j+1)] +
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))])/2
}
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix$X[j] - edge_matrix$X[i])^2 +
(edge_matrix$Y[j] - edge_matrix$Y[i])^2 +
(edge_matrix$Z[j] - edge_matrix$Z[i])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
View(edge_matrix)
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1), ncol = (ncol(Input_H_suppressed)-1))
View(edge_matrix)
for (i in 1:nrow(edge_matrix)) {
for (j in 1:ncol(edge_matrix)) {
simplified_input_H_suppressed = Input_H_suppressed[-i,(j+1)]
edge_matrix[i,j] = (Input_H_suppressed[i,(j+1)] +
simplified_input_H_suppressed[which.min(abs(simplified_input_H_suppressed -
Input_H_suppressed[i,(j+1)]))])/2
}
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 + ##sistemare $
(edge_matrix[j,2] - edge_matrix[j,2])^2 +
(edge_matrix[j,3] - edge_matrix[j,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
View(graph_Eadj_matrix)
View(graph_Vadj_matrix)
