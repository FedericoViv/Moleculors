message("No Input file detected")
return("No graphical matrix was computed")
}
return(message("Computing graphical Matrix... OK"))
}
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vdistance_matrix)
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
i = 1
j = 3
sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
print(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
graph_Vdistance_matrix[i,j] = floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - floor(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
print(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
graph_Vdistance_matrix[i,j] = round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1),
ncol = (ncol(Input_H_suppressed)-1))
h = 1
counter = 1
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in h:nrow(graph_Vdistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 1) {
edge_matrix[counter, 1] = (Input_H_suppressed$X[i] + Input_H_suppressed$X[j])/2
edge_matrix[counter, 2] = (Input_H_suppressed$Y[i] + Input_H_suppressed$Y[j])/2
edge_matrix[counter, 3] = (Input_H_suppressed$Z[i] + Input_H_suppressed$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 +
(edge_matrix[j,2] - edge_matrix[i,2])^2 +
(edge_matrix[j,3] - edge_matrix[i,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computed")
}
return(message("Computing graphical Matrix... OK"))
}
Moleculors$graphical_matrix()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
print(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
graph_Vdistance_matrix[i,j] = round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
if (i == j) {
graph_Vadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vdistance_matrix)
View(graph_VCdistance_matrix)
edge_matrix = matrix(nrow = (nrow(Input_H_suppressed) - 1),
ncol = (ncol(Input_H_suppressed)-1))
h = 1
counter = 1
i = 1
j = 1
for (j in h:nrow(graph_Vdistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 1) {
edge_matrix[counter, 1] = (Input_H_suppressed$X[i] + Input_H_suppressed$X[j])/2
edge_matrix[counter, 2] = (Input_H_suppressed$Y[i] + Input_H_suppressed$Y[j])/2
edge_matrix[counter, 3] = (Input_H_suppressed$Z[i] + Input_H_suppressed$Z[j])/2
counter = counter + 1
}
}
h = h + 1
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in h:nrow(graph_Vdistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 1) {
edge_matrix[counter, 1] = (Input_H_suppressed$X[i] + Input_H_suppressed$X[j])/2
edge_matrix[counter, 2] = (Input_H_suppressed$Y[i] + Input_H_suppressed$Y[j])/2
edge_matrix[counter, 3] = (Input_H_suppressed$Z[i] + Input_H_suppressed$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
1:nrow(graph_Vdistance_matrix)
Input_H_suppressed$X[i]
Input_H_suppressed$X[j]
edge_matrix[counter, 1] = (Input_H_suppressed$X[i] + Input_H_suppressed$X[j])/2
edge_matrix[counter, 2] = (Input_H_suppressed$Y[i] + Input_H_suppressed$Y[j])/2
edge_matrix[counter, 3] = (Input_H_suppressed$Z[i] + Input_H_suppressed$Z[j])/2
edge_matrix[counter, 1]
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
print(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2))
graph_Vdistance_matrix[i,j] = round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
edge_matrix = matrix(nrow = nrow(Input_H_suppressed),
ncol = (ncol(Input_H_suppressed)-1))
h = 1
counter = 1
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in h:nrow(graph_Vdistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 1) {
edge_matrix[counter, 1] = (Input_H_suppressed$X[i] + Input_H_suppressed$X[j])/2
edge_matrix[counter, 2] = (Input_H_suppressed$Y[i] + Input_H_suppressed$Y[j])/2
edge_matrix[counter, 3] = (Input_H_suppressed$Z[i] + Input_H_suppressed$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 +
(edge_matrix[j,2] - edge_matrix[i,2])^2 +
(edge_matrix[j,3] - edge_matrix[i,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computed")
}
return(message("Computing graphical Matrix... OK"))
}
Moleculors$graphical_matrix()
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
View(Moleculors)
Moleculors[["graph_Vdistance_matrix"]]
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2
),0) #(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
edge_matrix = matrix(nrow = nrow(Input_H_suppressed),
ncol = (ncol(Input_H_suppressed)-1))
h = 1
counter = 1
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in h:nrow(graph_Vdistance_matrix)) {
if (graph_Vdistance_matrix[i,j] == 1) {
edge_matrix[counter, 1] = (Input_H_suppressed$X[i] + Input_H_suppressed$X[j])/2
edge_matrix[counter, 2] = (Input_H_suppressed$Y[i] + Input_H_suppressed$Y[j])/2
edge_matrix[counter, 3] = (Input_H_suppressed$Z[i] + Input_H_suppressed$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 +
(edge_matrix[j,2] - edge_matrix[i,2])^2 +
(edge_matrix[j,3] - edge_matrix[i,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
} else {
message("No Input file detected")
return("No graphical matrix was computed")
}
return(message("Computing graphical Matrix... OK"))
}
Moleculors$graphical_matrix()
View(Moleculors)
Moleculors[["graph_Vdistance_matrix"]]
Moleculors = new.env()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
Moleculors$Input = cartesian_csv
return(message("Loading successful"))
}
Moleculors$Molecular_input()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
if (i == j) {
graph_Vadj_matrix[i,j] = 0
#graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vadj_matrix)
View(graph_Vdistance_matrix)
graph_Vdistance_matrix[1,-1]
graph_Vdistance_matrix[1,-1]
min(graph_Vdistance_matrix[1,-1])
apply(graph_Vdistance_matrix, 2, `/`, min(graph_Vdistance_matrix[1,-1]))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
#graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
graph_Vdistance_matrix = apply(graph_Vdistance_matrix, 2, `/`, min(graph_Vdistance_matrix[1,-1]))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
#graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vadj_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
graph_Vdistance_matrix = apply(graph_Vdistance_matrix, 2, `/`, min(graph_Vdistance_matrix[1,-1]))
View(graph_Vdistance_matrix)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
#graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vadj_matrix)
View(graph_Vdistance_matrix)
View(graph_Vdistance_matrix)
i = 2
j = 3
i == j
graph_Vdistance_matrix[i,j] == 1
graph_Vdistance_matrix[i,j]
graph_Vdistance_matrix[i,j] == 1.0
graph_Vdistance_matrix[i,j] == 1
graph_Vdistance_matrix[i,j] == 1
raph_Vdistance_matrix[i,j]
graph_Vdistance_matrix[i,j]
View(graph_Vadj_matrix)
View(graph_VCdistance_matrix)
View(graph_Vdistance_matrix)
as.integer(graph_Vdistance_matrix[i,j]) == 1
as.integer(graph_Vdistance_matrix[i,j]) == 1
as.integer(graph_Vdistance_matrix[i,j])
as.integer(graph_Vdistance_matrix[i,j])
round(graph_Vdistance_matrix[i,j],0) == 1
round(graph_Vdistance_matrix[i,j],0) == 1
graph_Vdistance_matrix
