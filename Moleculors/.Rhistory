Moleculors = new.env()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
return(Moleculors$Input = cartesian_csv)
}
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
Moleculors$Input = cartesian_csv
return()
}
Moleculors$Molecular_input()
Moleculors$Input
?new.env
Weight_library = read.csv("tables/weight_table.csv")
rm(Weight_library)
Weight_library = read.csv("tables/weight_table.csv")
head(Weight_library)
Weight_library$Weight[Symbol == "H"]
Weight_library$Weight[Weight_library$Symbol == "H"]
Moleculors$Input$Atom[2]
Moleculors$Input$Atom[3]
vec = vector()
vec[1] = 1
vec[2] = 1
vec[3] = 1
Moleculors$molecular_weight = function(){
if (Moleculors$Input) {
Weight_library = read.csv("tables/weight_table.csv")
} else {
return(message("No Input file detected"))
}
weight_vector = vector()
for (i in 1:ncol(Moleculors$Input)) {
weight_vector[i] = Weight_library$Weight[Weight_library$Symbol == Moleculors$Input$Atom[i]]
}
Moleculors$Weight = sum(weight_vector)
return("Weight .... Ok")
}
rm(Weight_library)
Moleculors$molecular_weight()
Moleculors$Input
Moleculors$molecular_weight = function(){
if (is.data.frame(Moleculors$Input)) {
Weight_library = read.csv("tables/weight_table.csv")
} else {
return(message("No Input file detected"))
}
weight_vector = vector()
for (i in 1:ncol(Moleculors$Input)) {
weight_vector[i] = Weight_library$Weight[Weight_library$Symbol == Moleculors$Input$Atom[i]]
}
Moleculors$Weight = sum(weight_vector)
return("Weight .... Ok")
}
Moleculors$molecular_weight()
Weight_library = read.csv("tables/weight_table.csv")
i = 1
Weight_library$Weight[Weight_library$Symbol == Moleculors$Input$Atom[i]]
Weight_library$Weight
Weight_library$Weight[Weight_library$Symbol]
Weight_library$Weight[Weight_library$Symbol == "H"]
Weight_library$Weight[Weight_library$Symbol == "H"]
Moleculors$Input$Atom
Moleculors$Input$Atom[1]
as.character(Moleculors$Input$Atom[1])
Moleculors$molecular_weight = function(){
if (is.data.frame(Moleculors$Input)) {
Weight_library = read.csv("tables/weight_table.csv")
} else {
return(message("No Input file detected"))
}
weight_vector = vector()
for (i in 1:ncol(Moleculors$Input)) {
weight_vector[i] = Weight_library$Weight[Weight_library$Symbol == as.character(Moleculors$Input$Atom[i])]
}
Moleculors$Weight = sum(weight_vector)
return("Weight .... Ok")
}
Moleculors$molecular_weight()
Moleculors$Weight
Moleculors$Input
Moleculors$molecular_weight = function(){
if (is.data.frame(Moleculors$Input)) {
Weight_library = read.csv("tables/weight_table.csv")
} else {
return(message("No Input file detected"))
}
weight_vector = vector()
for (i in 1:nrow(Moleculors$Input)) {
weight_vector[i] = Weight_library$Weight[Weight_library$Symbol == as.character(Moleculors$Input$Atom[i])]
}
Moleculors$Weight = sum(weight_vector)
return("Weight .... Ok")
}
Moleculors$molecular_weight()
Moleculors$Weight
rm(Weight_library)
rm(i)
rm(vec)
Moleculors$molecular_weight()
Moleculors$Weight
?nrow()
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
View(cartesian_csv)
View(cartesian_csv)
nrow(cartesian_csv)
rm(cartesian_csv)
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
Moleculors$Input = cartesian_csv
return("Loading successful")
}
Moleculors$Molecular_input()
Moleculors$Input = Moleculors$Input[- Moleculors$Input$Atom == "H",]
Moleculors$Input = Moleculors$Input[-Moleculors$Input$Atom == "H",]
Moleculors$Input = Moleculors$Input[-c(Moleculors$Input$Atom == "H"),]
if(is.data.frame(Moleculors$Input)){
Moleculors$Input = Moleculors$Input[- Moleculors$Input$Atom == "H",]
}
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
Moleculors$Input = Moleculors$Input[- Moleculors$Input$Atom == "H",]
}
}
Moleculors$Input
Moleculors$Molecular_input()
Moleculors$Input$Atom == "H"
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
for (i in 1:nrow(Moleculors$Input)) {
if (Moleculors$Input$Atom == "H") {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input$Atom[-hydrogen_vector,]
}
}
}
}
Moleculors$Input
Moleculors$graphical_matrix()
Moleculors$Input
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydgrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (Moleculors$Input$Atom == "H") {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input$Atom[-hydrogen_vector,]
}
}
}
}
Moleculors$graphical_matrix()
warnings()
Moleculors$Input
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydgrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom == "H"))) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input$Atom[-hydrogen_vector,]
}
}
}
}
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydgrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input$Atom[-hydrogen_vector,]
}
}
}
}
Moleculors$Input
Moleculors$graphical_matrix()
Moleculors$Input
Moleculors$graphical_matrix()
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydgrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input$Atom[-hydrogen_vector,]
}
}
}
}
Moleculors$graphical_matrix()
hydgrogen_vector = c()
i = 1
hydrogen_vector = append(hydrogen_vector, i)
append(hydrogen_vector, i)
hydrogen_vector = c()
hydrogen_vector = append(hydrogen_vector, i)
rm(hydgrogen_vector)
rm(hydrogen_vector)
rm(i)
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input$Atom[-hydrogen_vector,]
}
}
}
}
Moleculors$Input
Moleculors$graphical_matrix()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input$Atom[-hydrogen_vector,]
}
}
hydrogen_vector
Moleculors$Input[-hydrogen_vector,]
rm(i)
rm(hydrogen_vector)
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input[-hydrogen_vector,]
}
}
}
}
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
Moleculors$Input = cartesian_csv
return("Loading successful")
}
Moleculors$Molecular_input
Moleculors$Molecular_input
Moleculors$Molecular_input()
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input = Moleculors$Input[-hydrogen_vector,]
}
}
}
}
Moleculors$graphical_matrix()
Moleculors$Input
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Moleculors$Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
}
}
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
for (i in 1:nrow(Input_H_suppressed)) {
Input_H_suppressed$X[i] = Input_H_suppressed[i] - Input_H_suppressed[1]
Input_H_suppressed$Y[i] = Input_H_suppressed[i] - Input_H_suppressed[1]
Input_H_suppressed$Z[i] = Input_H_suppressed[i] - Input_H_suppressed[1]
print(Input_H_suppressed)
}
} else {
message("No Input file detected")
return("No graphical matrix was computated")
}
}
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
View(Input_H_suppressed)
1:nrow(Input_H_suppressed)
i = 1
Input_H_suppressed$X[i]
Input_H_suppressed[i] - Input_H_suppressed[1]
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
for (i in 1:nrow(Input_H_suppressed)) {
Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
Input_H_suppressed$Y[i] = Input_H_suppressed$y[i] - Input_H_suppressed$Y[1]
Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
print(Input_H_suppressed)
}
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
for (i in 1:nrow(Input_H_suppressed)) {
Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
print(Input_H_suppressed)
}
Input_H_suppressed
distance_vector = apply(Input_H_suppressed, 1,
sqrt(Input_H_suppressed$X^2 +
Input_H_suppressed$Y^2 +
Input_H_suppressed$Z^2))
Input_H_suppressed$X
apply(Input_H_suppressed, 1,
Input_H_suppressed^2)
exp(1)
power()
power(2)
power(3)
apply(Input_H_suppressed, 1,
^2)
`^`(x,y)
`^`(2,3)
`^`(Input_H_suppressed,2)
apply(Input_H_suppressed, 1,
`^`(Input_H_suppressed,2)
)
apply(Input_H_suppressed, 1,
`^`,2)
apply(Input_H_suppressed[,-1], 1,
`^`,2)
View(Input_H_suppressed)
-6.063842*-6.063842
apply(Input_H_suppressed[,-1], 1, `^`,2)
distance_vector = apply(Input_H_suppressed[,-1], 1, `^`,2)
apply(distance_vector, 2, sum)
apply(distance_vector, 1, sqrt)
apply(distance_vector, 2, sqrt)
distance_vector = apply(distance_vector, 2, sum)
apply(distance_vector, 2, sum)
distance_vector
apply(distance_vector, 2, sqrt)
apply(distance_vector, 1, sqrt)
apply(distance_vector, 1, sqrt)
sqrt(distance_vector)
sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
View(Input_H_suppressed)
Moleculors$Input
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
View(Input_H_suppressed)
Input_H_suppressed[,-1]
apply(Input_H_suppressed[,-1] ,1 , -Input_H_suppressed[1,])
apply(Input_H_suppressed ,1 , - Input_H_suppressed[1,]
)
rm(i)
for (i in 1:nrow(Input_H_suppressed)) {
Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
print(Input_H_suppressed)
}
i in 1:nrow(Input_H_suppressed)
i = 2
Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
i in nrow(Input_H_suppressed):1
i in nrow(Input_H_suppressed):1
nrow(Input_H_suppressed):1
for (i in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
print(Input_H_suppressed)
}
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
for (i in (nrow(Input_H_suppressed):1)) {
Input_H_suppressed$X[i] = Input_H_suppressed$X[i] - Input_H_suppressed$X[1]
Input_H_suppressed$Y[i] = Input_H_suppressed$Y[i] - Input_H_suppressed$Y[1]
Input_H_suppressed$Z[i] = Input_H_suppressed$Z[i] - Input_H_suppressed$Z[1]
print(Input_H_suppressed)
}
distance_vector = sqrt(apply(apply(Input_H_suppressed[,-1], 1, `^`,2), 2, sum))
distance_vector
