for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vdistance_matrix)
which(10)
which.min(10, c(1:10))
which.min(10)
which.min(10:10)
which.min(10:100, 1)
?which.min
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
for (i in 1:nrow(graph_Vdistance_matrix)) {
normi = min(graph_Vdistance_matrix[1,-1])
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,j] - normi))) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
View(graph_Vdistance_matrix)
View(graph_Vdistance_matrix)
min(graph_Vdistance_matrix[1,-1])
normi = min(graph_Vdistance_matrix[1,-1])
which.min(abs(graph_Vdistance_matrix[i,j] - normi)
)
i = 1
normi = min(graph_Vdistance_matrix[1,-1])
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,j] - normi))) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
j = 1
i = 1
normi = min(graph_Vdistance_matrix[1,-1])
j == which.min(abs(graph_Vdistance_matrix[i,j] - normi))
graph_Vdistance_matrix[i,j]
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,j] - normi))) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
i = 1
j = 1
graph_Vdistance_matrix[i,j]
normi
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,j] - normi & j != i))) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,j] - normi)) & j != i) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
i = 1
j = 1
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
== which.min(abs(graph_Vdistance_matrix[i,j] - normi))
which.min(abs(graph_Vdistance_matrix[i,j] - normi))
j == which.min(abs(graph_Vdistance_matrix[i,j] - normi))
j = 1
i = 1
j == which.min(abs(graph_Vdistance_matrix[i,j] - normi))
j == which.min(abs(graph_Vdistance_matrix[i,j] - normi)) & j != i
which.min(abs(graph_Vdistance_matrix[i,] - normi)
j = 2)
j == which.min(abs(graph_Vdistance_matrix[i,] - normi))
j = 2
j == which.min(abs(graph_Vdistance_matrix[i,] - normi))
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,] - normi)) & j != i) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if ((ceiling(graph_Vdistance_matrix[i,j] - graph_Vdistance_matrix[i,j]) <= 0.55)) {
graph_Vdistance_matrix[i,j] = ceiling(graph_Vdistance_matrix[i,j])
} else {
graph_Vdistance_matrix[i,j] = floor(graph_Vdistance_matrix[i,j])
}
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,] - normi)) & j != i) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if ((ceiling(graph_Vdistance_matrix[i,j] - graph_Vdistance_matrix[i,j]) <= 0.5)) {
graph_Vdistance_matrix[i,j] = ceiling(graph_Vdistance_matrix[i,j])
} else {
graph_Vdistance_matrix[i,j] = floor(graph_Vdistance_matrix[i,j])
}
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,] - normi)) & j != i) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
i = 3
j = 1
ceiling(graph_Vdistance_matrix[i,j]
)
graph_Vdistance_matrix[i,j]
ceiling(graph_Vdistance_matrix[i,j] - graph_Vdistance_matrix[i,j])
ceiling(graph_Vdistance_matrix[i,j] - graph_Vdistance_matrix[i,j])
ceiling(graph_Vdistance_matrix[i,j] - graph_Vdistance_matrix[i,j])
ceiling(graph_Vdistance_matrix[i,j] - graph_Vdistance_matrix[i,j])
ceiling(graph_Vdistance_matrix[i,j]) - graph_Vdistance_matrix[i,j])
ceiling(graph_Vdistance_matrix[i,j]) - graph_Vdistance_matrix[i,j])
ceiling(graph_Vdistance_matrix[i,j]) - graph_Vdistance_matrix[i,j])
ceiling(graph_Vdistance_matrix[i,j]) - graph_Vdistance_matrix[i,j]
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if ((ceiling(graph_Vdistance_matrix[i,j]) - graph_Vdistance_matrix[i,j]) <= 0.55) {
graph_Vdistance_matrix[i,j] = ceiling(graph_Vdistance_matrix[i,j])
} else {
graph_Vdistance_matrix[i,j] = floor(graph_Vdistance_matrix[i,j])
}
}
}
View(graph_Vdistance_matrix)
Moleculors$Molecular_input()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
normi = min(graph_Vdistance_matrix[1,-1])
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (j == which.min(abs(graph_Vdistance_matrix[i,] - normi)) & j != i) {
graph_Vdistance_matrix[i,j] = 1
}
}
}
View(graph_Vdistance_matrix)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if ((ceiling(graph_Vdistance_matrix[i,j]) - graph_Vdistance_matrix[i,j]) <= 0.55) {
graph_Vdistance_matrix[i,j] = ceiling(graph_Vdistance_matrix[i,j])
} else {
graph_Vdistance_matrix[i,j] = floor(graph_Vdistance_matrix[i,j])
}
}
}
View(graph_Vdistance_matrix)
Moleculors = new.env()
Moleculors$Molecular_input = function(){
cartesian_csv = tryCatch({ cartesian_csv = read.csv(file.choose(),
header = FALSE)
},
warning = function(w){
warning(w)
message("csv file doesn't look properly formatted")
},
error = function(e){
message("Input file doesn't look like a csv file")
return(NA)
},
finally = { message("Always use cartesian coordinates as input!")
})
if (ncol(cartesian_csv) != 4) {
return(message("Input file has more/less column than expected"))
}
names(cartesian_csv) = c("Atom", "X", "Y", "Z")
print(cartesian_csv)
Moleculors$Input = cartesian_csv
return(message("Loading successful"))
}
Moleculors$Molecular_input()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = apply(graph_Vdistance_matrix, 2, ceiling())
graph_Vdistance_matrix = apply(graph_Vdistance_matrix, 2, ceiling)
View(graph_Vdistance_matrix)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
graph_Vdistance_matrix = apply(graph_Vdistance_matrix, 2, `/`, min(graph_Vdistance_matrix[1,-1]))
View(graph_Vdistance_matrix)
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
View(graph_Vdistance_matrix)
2.789652/1.394826
round(2.789652,2)/round(1.394826, 2)
apply(graph_Vdistance_matrix, 2, round, 2)
graph_Vdistance_matrix = apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1]))
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
View(graph_Vdistance_matrix)
apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])
)
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
View(graph_Vdistance_matrix)
Moleculors$Molecular_input()
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
#graph_VCdistance_matrix[i,j] = nrow(Input_H_suppressed) - round(sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
#        (Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
#       (Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2),0)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
View(graph_Vdistance_matrix)
graph_Vdistance_matrix
apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix))
abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_Vdistance_matrix)
View(graph_VCdistance_matrix)
View(graph_Vadj_matrix)
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
