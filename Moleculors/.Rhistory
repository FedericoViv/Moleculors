} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(graph_VCdistance_matrix)
View(graph_Vdistance_matrix)
Moleculors$Vmatrices = function(Cart_Input_Hsupp){
graph_Vdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_Vadj_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
graph_VCdistance_matrix = matrix(nrow = nrow(Input_H_suppressed), ncol = nrow(Input_H_suppressed))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Input_H_suppressed$X[j] - Input_H_suppressed$X[i])^2 +
(Input_H_suppressed$Y[j] - Input_H_suppressed$Y[i])^2 +
(Input_H_suppressed$Z[j] - Input_H_suppressed$Z[i])^2)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
}
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
Moleculors$Vmatrices(Input_H_suppressed)
Moleculors$Ematrices(Input_H_suppressed, Moleculors$graph_Vadj_matrix)
} else {
message("No Input file detected")
return("No graphical matrices were computed")
}
return(message("Computing graphical Matrices... OK"))
}
Moleculors$Vmatrices = function(Cart_Input_Hsupp){
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
}
Moleculors$Ematrices = function(Cart_Input_Hsupp, Vadjmatrix){
edge_matrix = matrix(nrow = nrow(Cart_Input_Hsupp),
ncol = (ncol(Cart_Input_Hsupp)-1))
h = 1
counter = 1
for (i in 1:nrow(Vadjmatrix)) {
for (j in h:nrow(Vadjmatrix)) {
if (Vadjmatrix[i,j] == 1) {
edge_matrix[counter, 1] = (Cart_Input_Hsupp$X[i] + Cart_Input_Hsupp$X[j])/2
edge_matrix[counter, 2] = (Cart_Input_Hsupp$Y[i] + Cart_Input_Hsupp$Y[j])/2
edge_matrix[counter, 3] = (Cart_Input_Hsupp$Z[i] + Cart_Input_Hsupp$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 +
(edge_matrix[j,2] - edge_matrix[i,2])^2 +
(edge_matrix[j,3] - edge_matrix[i,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (Vadjmatrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
}
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$graph_Vdistance_matrix
Moleculors$graph_VCdistance_matrix
Moleculors$graph_Vadj_matrix
Moleculors$graph_Edistance_matrix
Cart_Input_Hsupp = Input_H_suppressed
edge_matrix = matrix(nrow = nrow(Cart_Input_Hsupp),
ncol = (ncol(Cart_Input_Hsupp)-1))
View(edge_matrix)
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
Cart_Input_Hsupp = Input_H_suppressed
edge_matrix = matrix(nrow = nrow(Cart_Input_Hsupp),
ncol = (ncol(Cart_Input_Hsupp)-1))
h = 1
counter = 1
Vadjmatrix = Moleculors$graph_Vadj_matrix
i = 1
j = 1
Vadjmatrix[i,j] == 1
j = 2
Vadjmatrix[i,j] == 1
for (i in 1:nrow(Vadjmatrix)) {
for (j in h:nrow(Vadjmatrix)) {
if (Vadjmatrix[i,j] == 1) {
edge_matrix[counter, 1] = (Cart_Input_Hsupp$X[i] + Cart_Input_Hsupp$X[j])/2
edge_matrix[counter, 2] = (Cart_Input_Hsupp$Y[i] + Cart_Input_Hsupp$Y[j])/2
edge_matrix[counter, 3] = (Cart_Input_Hsupp$Z[i] + Cart_Input_Hsupp$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
View(edge_matrix)
edge_matrix = matrix(nrow = nrow(Cart_Input_Hsupp),
ncol = (ncol(Cart_Input_Hsupp)-1))
h = 1
counter = 1
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
View(edge_matrix)
View(graph_Vadj_matrix)
View(graph_VCdistance_matrix)
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
View(graph_Vdistance_matrix)
graph_Vdistance_matrix = ceiling(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])))
View(graph_Vdistance_matrix)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1]
apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])
apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])
apply(graph_Vdistance_matrix, 2, round, 2)
apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1]))
Moleculors$Vmatrices = function(Cart_Input_Hsupp){
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])), 2, round, 2))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
}
Moleculors$Ematrices = function(Cart_Input_Hsupp, Vadjmatrix){
edge_matrix = matrix(nrow = nrow(Cart_Input_Hsupp),
ncol = (ncol(Cart_Input_Hsupp)-1))
h = 1
counter = 1
for (i in 1:nrow(Vadjmatrix)) {
for (j in h:nrow(Vadjmatrix)) {
if (Vadjmatrix[i,j] == 1) {
edge_matrix[counter, 1] = (Cart_Input_Hsupp$X[i] + Cart_Input_Hsupp$X[j])/2
edge_matrix[counter, 2] = (Cart_Input_Hsupp$Y[i] + Cart_Input_Hsupp$Y[j])/2
edge_matrix[counter, 3] = (Cart_Input_Hsupp$Z[i] + Cart_Input_Hsupp$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 +
(edge_matrix[j,2] - edge_matrix[i,2])^2 +
(edge_matrix[j,3] - edge_matrix[i,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (Vadjmatrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
}
Moleculors$graphical_matrix()
Moleculors$graph_Vadj_matrix
Moleculors$graph_Vdistance_matrix
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
apply(graph_Vdistance_matrix, 2, round, 2)
apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])
)
apply(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])), 2, round, 2)
Moleculors$Vmatrices = function(Cart_Input_Hsupp){
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
graph_Vdistance_matrix = ceiling(apply(apply(apply(graph_Vdistance_matrix, 2, round, 2), 2, `/`, min(graph_Vdistance_matrix[1,-1])), 2, round, 1))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
}
Moleculors$graphical_matrix()
Moleculors$graph_Vadj_matrix
Moleculors$graph_Eadj_matrix
Moleculors$graph_Edistance_matrix
Moleculors$Ematrices = function(Cart_Input_Hsupp, Vadjmatrix){
edge_matrix = matrix(nrow = (nrow(Cart_Input_Hsupp)-1),
ncol = (ncol(Cart_Input_Hsupp)-1))
h = 1
counter = 1
for (i in 1:nrow(Vadjmatrix)) {
for (j in h:nrow(Vadjmatrix)) {
if (Vadjmatrix[i,j] == 1) {
edge_matrix[counter, 1] = (Cart_Input_Hsupp$X[i] + Cart_Input_Hsupp$X[j])/2
edge_matrix[counter, 2] = (Cart_Input_Hsupp$Y[i] + Cart_Input_Hsupp$Y[j])/2
edge_matrix[counter, 3] = (Cart_Input_Hsupp$Z[i] + Cart_Input_Hsupp$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 +
(edge_matrix[j,2] - edge_matrix[i,2])^2 +
(edge_matrix[j,3] - edge_matrix[i,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (Vadjmatrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
}
Moleculors$graphical_matrix()
Moleculors$graph_Edistance_matrix
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$Ematrices = function(Cart_Input_Hsupp, Vadjmatrix){
edge_matrix = matrix(nrow = nrow(Cart_Input_Hsupp),
ncol = (ncol(Cart_Input_Hsupp)-1))
h = 1
counter = 1
for (i in 1:nrow(Vadjmatrix)) {
for (j in h:nrow(Vadjmatrix)) {
if (Vadjmatrix[i,j] == 1) {
edge_matrix[counter, 1] = (Cart_Input_Hsupp$X[i] + Cart_Input_Hsupp$X[j])/2
edge_matrix[counter, 2] = (Cart_Input_Hsupp$Y[i] + Cart_Input_Hsupp$Y[j])/2
edge_matrix[counter, 3] = (Cart_Input_Hsupp$Z[i] + Cart_Input_Hsupp$Z[j])/2
counter = counter + 1
}
}
h = h + 1
}
graph_Edistance_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
graph_Eadj_matrix = matrix(nrow = nrow(edge_matrix), ncol = nrow(edge_matrix))
for (i in 1:nrow(graph_Edistance_matrix)) {
for (j in 1:ncol(graph_Edistance_matrix)) {
graph_Edistance_matrix[i,j] = floor(sqrt((edge_matrix[j,1] - edge_matrix[i,1])^2 +
(edge_matrix[j,2] - edge_matrix[i,2])^2 +
(edge_matrix[j,3] - edge_matrix[i,3])^2))
if (i == j) {
graph_Eadj_matrix[i,j] = 0
} else if (Vadjmatrix[i,j] == 1){
graph_Eadj_matrix[i,j] = 1
} else {
graph_Eadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Edistance_matrix = graph_Edistance_matrix
Moleculors$graph_Eadj_matrix = graph_Eadj_matrix
}
Moleculors$graphical_matrix()
Moleculors$graph_Vdistance_matrix
graph_Vdistance_matrix, 2, round, 2
apply(graph_Vdistance_matrix, 2, round, 2)
Moleculors$Vmatrices_copy = function(Cart_Input_Hsupp){
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
graph_Vdistance_matrix = apply(graph_Vdistance_matrix, 2, round, 2)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:nrow(graph_Vdistance_matrix)) {
if ((graph_Vdistance_matrix[i,j] - min(graph_Vdistance_matrix[1,-1])) <= 0.05) {
graph_Vdistance_matrix[i,j] = min(graph_Vdistance_matrix[1,-1])
}
}
}
graph_Vdistance_matrix = ceiling(apply(graph_Vdistance_matrix, 2, `/`, min(graph_Vdistance_matrix[1,-1])))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
}
Moleculors$graphical_matrix = function(){
if(is.data.frame(Moleculors$Input)){
hydrogen_vector = c()
for (i in 1:nrow(Moleculors$Input)) {
if (as.character(Moleculors$Input$Atom[i] == "H")) {
hydrogen_vector = append(hydrogen_vector, i)
}
if (i == nrow(Moleculors$Input)) {
Input_H_suppressed = Moleculors$Input[-hydrogen_vector,]
}
}
Moleculors$Vmatrices_copy(Input_H_suppressed)
Moleculors$Ematrices(Input_H_suppressed, Moleculors$graph_Vadj_matrix)
} else {
message("No Input file detected")
return("No graphical matrices were computed")
}
return(message("Computing graphical Matrices... OK"))
}
Moleculors$graphical_matrix()
Moleculors$graph_Vdistance_matrix
Moleculors$Vmatrices_copy = function(Cart_Input_Hsupp){
graph_Vdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_Vadj_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
graph_VCdistance_matrix = matrix(nrow = nrow(Cart_Input_Hsupp), ncol = nrow(Cart_Input_Hsupp))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
graph_Vdistance_matrix[i,j] = sqrt((Cart_Input_Hsupp$X[j] - Cart_Input_Hsupp$X[i])^2 +
(Cart_Input_Hsupp$Y[j] - Cart_Input_Hsupp$Y[i])^2 +
(Cart_Input_Hsupp$Z[j] - Cart_Input_Hsupp$Z[i])^2)
}
}
graph_Vdistance_matrix = apply(graph_Vdistance_matrix, 2, round, 2)
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:nrow(graph_Vdistance_matrix)) {
if ((graph_Vdistance_matrix[i,j] - min(graph_Vdistance_matrix[1,-1])) <= 0.05 & i != j) {
graph_Vdistance_matrix[i,j] = min(graph_Vdistance_matrix[1,-1])
}
}
}
graph_Vdistance_matrix = ceiling(apply(graph_Vdistance_matrix, 2, `/`, min(graph_Vdistance_matrix[1,-1])))
graph_VCdistance_matrix = abs(apply(graph_Vdistance_matrix, 2, `-`, nrow(graph_Vdistance_matrix)))
for (i in 1:nrow(graph_Vdistance_matrix)) {
for (j in 1:ncol(graph_Vdistance_matrix)) {
if (i == j) {
graph_Vadj_matrix[i,j] = 0
graph_VCdistance_matrix[i,j] = 0
} else if (graph_Vdistance_matrix[i,j] == 1){
graph_Vadj_matrix[i,j] = 1
} else {
graph_Vadj_matrix[i,j] = 0
}
}
}
Moleculors$graph_Vdistance_matrix = graph_Vdistance_matrix
Moleculors$graph_Vadj_matrix = graph_Vadj_matrix
Moleculors$graph_VCdistance_matrix = graph_VCdistance_matrix
}
Moleculors$graphical_matrix()
Moleculors$graph_Vdistance_matrix
Moleculors$Molecular_input()
Moleculors$graphical_matrix()
Moleculors$graph_Vdistance_matrix
